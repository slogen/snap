#!/bin/bash

#ONLY_CLEANUP=yes
topdir="/mnt/backup"

set -e

status_text() {
    if test "$1" -eq "0"; then
	echo "SUCCESS ($1)"
    else
	echo "FAILURE ($1)"
    fi
}

read_config() {
  unset key
  unset remote_snapdir
  NOW="$(date --rfc-3339=seconds)"
  backup_host="$1"
  backup_dir="$topdir/backups/$backup_host/"
  snapshot_dir="$backup_dir/snaps"
  keyfile="$topdir/snap/snap.key"
  test -e "$keyfile" && key="$keyfile"
  current_backup_dir="$backup_dir/current"
  backup_log="$current_backup_dir/$(hostname)-backup.log"
  read -r -d '' sync_current_options <<EOF
--archive
--fuzzy
--one-file-system
--hard-links
--itemize-changes
--inplace
--del
--numeric-ids
--stats
--exclude *.img
--exclude *.iso
--exclude .gvfs
--exclude ${backup_log##*/}
--exclude ${backup_log##*/}.err
EOF
  remote_host="$backup_host"
  unset backup_dirs
  unset backup_count

  snap_cfg="$backup_dir/snap.cfg"
  . "$snap_cfg" || return 1
  sync_current_options="${sync_current_options} ${key:+-z}"
  backup_count="${backup_count:-${default_backup_count:-60}}"
  RSYNC_RSH="ssh -o TCPKeepAlive=yes -i ${key} -l root -c arcfour ${RSYNC_RSH_OPTIONS}"
}

_actual_backup() {
    local src="$1"
    shift
    local dst="$1"
    shift
    case "$src" in 
	(*/) ;;
	(*) src="${src}/"
    esac
    case "$dst" in 
	(${current_backup_dir}*/) ;;
	(${current_backup_dir}*) dst="${dst}/";;
	(*) 
	    echo "destination outside target: '$dst'"
	    return 255
	    ;;
    esac

    local begin_time="$(date --rfc-3339=seconds)"
	
    echo "--- BEGIN $begin_time $src to $dst"
    RSYNC_RSH="$RSYNC_RSH" \
	nice \
	ionice -c 3 \
	rsync \
	${SNAP_RSYNC_OPTIONS} \
	${rsync_path:+--rsync-path="${rsync_path}"} \
	$sync_current_options \
	  --no-whole-file \
	  --filter ":- .exclude_backup" \
	  "$@" \
	  "$src" "$dst"
    local ok=$?
    local end_time="$(date --rfc-3339=seconds)"
    echo "--- END $end_time $src to $dst, Status: $ok"
    return $ok
}

live_backup_dir() {
    local orig_dir="$1"
    local name="$(echo "$orig_dir" | tr '/' '_')"
    local src_dir="${remote_host:+$remote_host:}$orig_dir"
    local target_dir="$current_backup_dir/$name/"
    _actual_backup "$src_dir" "$target_dir"
    local ok="$?"
    # $?==3 means "stuff changed", OK that
    test "$ok" -eq "3" && ok="0"
    # $?==24 means "files vanished before transferred", OK THAT
    test "$ok" -eq "24" && ok="0"
    return $ok
}

live_backup_dirs() {
  local ok
  for d in "$@"; do
      live_backup_dir "$d"
      ok=$?
      test '!' "$ok" -eq "0" && return $ok
  done
  snapshot_target="$snapshot_dir/${NOW/ /_}"
  return 0
}


rebackup() {
    remote_snapdir="${remote_snapdir:-/mnt/backup/backups/$backup_host/snaps}"
    shift
    dirs=$($RSYNC_RSH "$remote_host" \
	find "$remote_snapdir" -maxdepth 1 -mindepth 1 -name "20*-*-*:*:*")
    latest_dir=$(echo "$dirs" | sort -r | head -n 1)
    latest_name="${latest_dir##*/}"
    src_dir="${remote_host:+$remote_host:}$latest_dir"
    dst_dir="$current_backup_dir/"
    snapshot_target="$snapshot_dir/${latest_name}"
    unset rsync_path
    _actual_backup "$src_dir" "$dst_dir"
}

libvirtbackup() {
    shift
    src_dir="${remote_host:+$remote_host:}/var/lib/libvirt"
    dst_dir="$current_backup_dir/"
    snapshot_target="$snapshot_dir/${NOW/ /_}"
    rsync_path="/root/rsync_libvirt.sh"
    _actual_backup "$src_dir" "$dst_dir"
}


current_snap() {
    if test "xyes" == "x${ONLY_CLEANUP}"; then
	return 0
    fi
    if test -e "$snapshot_target"; then
	echo "Snapshot directory already exits: '$snapshot_target'"
	if test "xyes" == "x${IGNORE_EXISTING_SNAP}"; then
	    return 0
	else
	    return 15
	fi
    fi
    mkdir -p "$snapshot_dir" \
      && btrfs subvolume snapshot "$current_backup_dir" "$snapshot_target"
}

either_backup_dirs_or_snap() {
    if test "xyes" == "x${ONLY_CLEANUP}"; then
	return 0
    fi

    case "${backup_dirs}" in
	("libvirt")
	    libvirtbackup;;
	("")
	    rebackup;;
	(*)
	    live_backup_dirs $backup_dirs
    esac
}

make_backup_() {
  local begin_time="$(date --rfc-3339=seconds)"
  echo "--- BACKUP START $@: $begin_time, Timestamp: $NOW"
  cleanup \
      && either_backup_dirs_or_snap \
      && current_snap
  local ok=$?
  local end_time="$(date --rfc-3339=seconds)"
  echo "--- BACKUP END $@: $end_time, Status: $ok"
  return $ok
}
ready_target() {
  local target_dir="$current_backup_dir"
  test -d "$target_dir" || btrfs subvol create "$target_dir"
}

make_backup() {
  local begin_time="$(date --rfc-3339=seconds)"
  read_config "$1" \
      && ready_target \
      && make_backup_ "$@" >"$backup_log" 2> >(tee "$backup_log.err" >&2)
  local ok=$?
  local end_time="$(date --rfc-3339=seconds)"
  local ok_text="$(status_text $ok)"
  local msg="$ok_text; @${backup_host}; ${backup_dirs}; END:$end_time BEGIN:$begin_time" 1>&2
  if test "$ok" -eq "0"; then
      echo "$msg"
  else
      echo "$msg" 1>&2
  fi
  return $ok
}

cleanup() {
    if test -d "$snapshot_dir"; then
	for d in $(find "$snapshot_dir" -mindepth 1 -maxdepth 1 \
	    -name "20*-*-*:*:*" -printf "%p\n" \
	    | sort -r | tail -n +"$backup_count")
	do
	    btrfs subvolume delete "$d"
	done
    fi
}

backup_hosts() {
  local failures=0
  local count=0
  for x in "$@"; do 
    make_backup "$x"
    ok=$?
    count=$((count + 1))
    test '!' "$ok" -eq "0" && failures=$((failures + 1))
  done
  local msg="$failures failures of $count backups"
  if test '!' "$failures" -eq "0"; then
    echo "*****************************" 1>&2
    echo "$msg" 1>&2
  else
    echo "$msg"
  fi
  return $all_ok
}

global_cfg="${topdir}/snap/global.cfg"
test -f "$global_cfg" && . "$global_cfg"

backup_hosts "$@"
