#!/bin/bash

read_config() {
  topdir="/mnt/backup"
  NOW="$(date --rfc-3339=seconds)"
  backup_host="$1"
  backup_dir="$topdir/backups/$backup_host/"
  snapshot_dir="$backup_dir/snaps"
  keyfile="$topdir/snap/snap.key"
  test -e "$keyfile" && key="$keyfile"
  current_backup_dir="$backup_dir/current"
  backup_log="$current_backup_dir/$(hostname)-backup.log"
  read -r -d '' sync_current_options <<EOF
--archive
--fuzzy
--one-file-system
--hard-links
--itemize-changes
--inplace
--del
--numeric-ids
--stats
--exclude *.img
--exclude *.qcow2
--exclude *.iso
--exclude .gvfs
--exclude ${backup_log##*/}
--exclude ${backup_log##*/}.err
EOF
  remote_host="$backup_host"
  unset backup_dirs
  unset backup_count

  snap_cfg="$backup_dir/snap.cfg"
  . "$snap_cfg" || return 1
  sync_current_options="${sync_current_options} ${key:+-z}"
  backup_count="${backup_count:-60}"
  RSYNC_RSH="ssh -i ${key} -l root -c blowfish ${RSYNC_RSH_OPTIONS}"
}

_actual_backup() {
    echo "_actual_backup $@" 1>&2
    local src
    local dst
    local ok
    src="$1"
    shift
    dst="$1"
    shift
    case "$src" in 
	(*/) ;;
	(*) src="${src}/"
    esac
    case "$dst" in 
	(${current_backup_dir}*/) ;;
	(${current_backup_dir}*) dst="${dst}/";;
	(*) 
	    echo "destination outside target: '$dst'"
	    return 255
	    ;;
    esac
	
    echo "--- BEGIN $src to $dst" 1>&2
    date 1>&2
    RSYNC_RSH="$RSYNC_RSH" \
	nice \
	ionice -c 3 \
        rsync \
	$sync_current_options \
	  --filter ":- .exclude_backup" \
	  "$@" \
	  "$src" "$dst"
    ok=$?
    echo "--- END $src to $dst, Status: $ok"
    return $ok
}

live_backup_dir() {
    orig_dir="$1"
    name="$(echo "$orig_dir" | tr '/' '_')"
    src_dir="${remote_host:+$remote_host:}$orig_dir"
    target_dir="$current_backup_dir/$name/"
    _actual_backup "$src_dir" "$target_dir"
    # $?==3 means "stuff changed", OK that
    test "$ok" -eq "3" && ok="0"
    # $?==24 means "files vanished before transferred", OK THAT
    test "$ok" -eq "24" && ok="0"
    return $ok
}

live_backup_dirs() {
  for d in "$@"; do
      live_backup_dir "$d"
      ok=$?
      test '!' "$ok" -eq "0" && return $ok
  done
  snapshot_target="$snapshot_dir/${NOW/ /_}"
  return 0
}


rebackup() {
    remote_snapdir="${remote_snapdir:-/mnt/backup/backups/$backup_host/snaps}"
    shift
    dirs=$($RSYNC_RSH "$remote_host" \
	find "$remote_snapdir" -maxdepth 1 -mindepth 1 -name "20*-*-*:*:*")
    latest_dir=$(echo "$dirs" | sort -r | head -n 1)
    latest_name="${latest_dir##*/}"
    src_dir="${remote_host:+$remote_host:}$latest_dir"
    dst_dir="$current_backup_dir/"
    snapshot_target="$snapshot_dir/${latest_name}"
    _actual_backup "$src_dir" "$dst_dir"
}


current_snap() {
    if test -e "$snapshot_target"; then
	echo "Snapshot directory already exits: '$snapshot_target'"
	return 15
    fi
    mkdir -p "$snapshot_dir" \
      && btrfs subvolume snapshot "$current_backup_dir" "$snapshot_target"
}

either_backup_dirs_or_snap() {
    if test "x" == "x${backup_dirs}"; then
	rebackup
    else
	live_backup_dirs $backup_dirs
    fi
}

make_backup_() {
  echo "--- BACKUP START: $NOW" 1>&2
  cleanup \
      && either_backup_dirs_or_snap \
      && current_snap
  ok=$?
  echo "--- BACKUP END: $(date --rfc-3339=seconds), Status: $ok" 1>&2
  return $ok
}
make_backup() {
  read_config "$1" \
      && make_backup_ "$@" >"$backup_log" 2>"$backup_log.err"
  ok=$?
  if test '!' "$ok" -eq "0"; then
    tail -n 500 "$backup_log.err"
    echo "------------------ LOG -----------------"
    tail -n 1000 "$backup_log"
  fi
  return $ok
}

cleanup() {
    for d in $(find "$snapshot_dir" -mindepth 1 -maxdepth 1 \
	-name "20*-*-*:*:*" -printf "%p\n" \
	| sort -r | tail -n +"$backup_count")
    do
	btrfs subvolume delete "$d"
    done
}

backup_hosts() {
  all_ok="0"
  for x in "$@"; do 
    make_backup "$x"
    ok=$?
    test '!' "$ok" -eq "0" && all_ok="$ok"
  done
  return $all_ok
}

backup_hosts "$@"


